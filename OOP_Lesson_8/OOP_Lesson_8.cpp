#include <iostream>
using namespace std;

// 1. 
// Написать шаблонную функцию div, которая должна вычислять результат деления двух параметров 
// и запускать исключение DivisionByZero, если второй параметр равен 0. 
// В функции main выводить результат вызова функции div в консоль, а также ловить исключения.
//
// 2. 
// Написать класс Ex, хранящий вещественное число x и имеющий конструктор по вещественному числу, 
// инициализирующий x значением параметра. Написать класс Bar, хранящий вещественное число y 
// (конструктор по умолчанию инициализирует его нулем) и имеющий метод set с единственным вещественным параметром a. 
// Если y + a > 100, возбуждается исключение типа Ex с данными a*y, иначе в y заносится значение a. 
// В функции main завести переменную класса Bar и в цикле в блоке try вводить с клавиатуры целое n. 
// Использовать его в качестве параметра метода set до тех пор, пока не будет введено 0. 
// В обработчике исключения выводить сообщение об ошибке, содержащее данные объекта исключения.

class Ex
{
private:
	double m_x;
public:
	Ex(double x) : m_x(x) { }
	const double getError() const { return m_x; }
};

class Bar
{
private:
	double m_y;
public:
	Bar() { m_y = 0; }
	void set(double a)
	{
		if (m_y + a > 100)
			throw Ex(m_y * a);
		else
			m_y = a;
	}
};

void task_2()
{
	Bar b;
	try
	{
		b.set(10);
		b.set(100);
	}
	catch (Ex& ex)
	{
		cerr << ex.getError() << endl;
	}
}

// 3.
// Написать класс «робот», моделирующий перемещения робота по сетке 10x10, у которого есть метод, 
// означающий задание переместиться на соседнюю позицию. Эти методы должны запускать классы-исключения 
// OffTheField, если робот должен уйти с сетки, и IllegalCommand, если подана неверная команда 
// (направление не находится в нужном диапазоне). Объект исключения должен содержать всю необходимую 
// информацию — текущую позицию и направление движения. Написать функцию main, пользующуюся этим классом 
// и перехватывающую все исключения от его методов, а также выводящую подробную информацию о всех возникающих ошибках.
//

int main()
{
	task_2();

}
